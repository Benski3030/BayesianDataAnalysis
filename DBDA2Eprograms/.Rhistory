#generate and audit rules
rules <- apriori (transformed_df, parameter = list(supp = 0.01, conf = 0.2)) #min Support as 0.001, confidence as 0.8.
rules_conf <- sort (rules, by="confidence", decreasing=TRUE) # 'high-confidence' rules.
inspect(head(rules_conf))
subsetRules <- which(colSums(is.subset(rules, rules)) > 1) # get subset rules in vector
library(syuzhet)
library(ggridges)
#get dataframe into shape
iman <- avengers_tidy %>%
filter(word == "iron_man") %>%
select(tweet_id) %>%
unique() %>%
inner_join(avengers_raw, by = "tweet_id")
#gather sentiment scores
imansnet <- get_nrc_sentiment(iman$tweet_text)
#tidy frame
imtweets <- avengers_raw %>%
semi_join(avengers_tidy, by = 'tweet_id') %>%
filter()
#truncate list to only include known avengers
the_avengers <- c("iron_man", "capt_america", "hulk", "thor", "spider_man",
"black_panther", "dr_strange", "black_widow")
#this is a helper funtion to gather sentiment scores for each avenger
avenger_sent <- function(hero_names, raw_tweets, tidy_tweets) {
df <- data.frame()
#loop through all the avengers by filtered name
for(hero in hero_names) {
hero_tweet <- tidy_tweets %>%
filter(word == hero) %>%
select(tweet_id) %>%
unique() %>%
inner_join(raw_tweets, by = "tweet_id")
#generate scores and attach hero name
hero_tweet_sent <- get_nrc_sentiment(hero_tweet$tweet_text)
hero_tweet_sent$hero_name <- hero
#bind it all together
df <- rbind(df, hero_tweet_sent)
}
return(df)
}
#execture the function
sentiment_combined <- avenger_sent(the_avengers, avengers_raw, avengers_tidy)
#generate frequency counts for positive and negative scores
sentiment_combined %>%
select(negative, positive) %>%
gather(sentiment, score) %>%
ggplot(aes(x = score, fill = sentiment, color = I("black"))) +
geom_histogram() +
scale_x_continuous(breaks = c(0:6), limits = c(-1, 7), expand = c(0, 0),
name = "random value") +
theme(legend.position = "none") +
facet_grid(. ~ sentiment) +
ggsave(file="sentiment.eps", width = 5, height = 4)
#generate frequency counts for positive and negative scores for each avenger
sentiment_combined %>%
select(hero_name, negative, positive) %>%
gather(sentiment, score, -hero_name) %>%
ggplot(aes(x = score, y = hero_name, fill = sentiment)) +
geom_density_ridges2(aes(), stat = "binline", binwidth = 1, scale = 0.95) +
scale_x_continuous(breaks = c(0:6), limits = c(-1, 7), expand = c(0, 0),
name = "Sentiment Counts") +
xlab("Sentiment Counts") +
facet_grid(. ~ sentiment) +
ylab("") +
theme(legend.position="none") +
ggtitle("Counts of Positive and Negative Sentiment for Avengers") +
ggsave(file="sentavg.eps", width = 6, height = 5)
library(rstan)
#http://mc-stan.org/
#stan model
model_string <- "
data {
int n1;
int n2;
int y1[n1];
int y2[n2];
}
parameters {
real<lower=0> positive;
real<lower=0> negative;
}
model {
positive ~ uniform(0, 100);
negative ~ uniform(0, 100);
y1 ~ poisson(positive);
y2 ~ poisson(negative);
}
generated quantities {
}
"
#prepare the data so it can be accepterd by stan
positive_sent <- sentiment_combined$positive
negative_sent <- sentiment_combined$negative
data_list <- list(y1 = positive_sent, y2 = negative_sent,
n1 = length(positive_sent), n2 = length(negative_sent))
# Compiling and producing posterior samples from the model.
stan_samples <- stan(model_code = model_string, data = data_list)
#check the output
stan_samples
#transform the data into a dataframe
s <- as.data.frame(stan_samples)
#calculate the difference between negative and positive posterior values
lambda_diff <- s$positive - s$negative
mean(lambda_diff)
#check it out
mean(lambda_diff)
qplot(lambda_diff, geom = "density") +
ggtitle("Posterior Distribution For Difference in Lambda")
#Helper function to run the model by each avenger
#I know there must be a more efficient and elegant way to do this in Stan
#however I still a bit of a noob at Stan - so hopefully in the future!
sent_diff_bayes <- function(hero_names, model, sent_data) {
df <- data.frame()
for (hero in hero_names) {
hero_sent <- sent_data %>%
select(hero_name, positive, negative) %>%
filter(hero_name == hero)
positive_sent <- hero_sent$positive
negative_sent <- hero_sent$negative
data_list <- list(
y1 = positive_sent,
y2 = negative_sent,
n1 = length(positive_sent),
n2 = length(negative_sent)
)
stan_samples <-
stan(model_code = model_string, data = data_list)
s <- as.data.frame(stan_samples)
s$hero_name <- hero
df <- rbind(df, s)
}
return(df)
}
#time to go get a cup of coffee...
#note I turned the cell vebosity down to avoid producing a wall output
bayes_sent_frame <- sent_diff_bayes(the_avengers, model_string, sentiment_combined)
#create a ridgeline plot of the posterior intervals
bayes_sent_frame %>%
mutate(lambda_diff = positive - negative) %>%
select(hero_name, lambda_diff) %>%
ggplot(aes(x = lambda_diff, y = hero_name)) +
geom_density_ridges(scale = 2, fill = "grey", color = "darkgrey") +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank()) +
xlab(paste(expression(lambda), " Difference")) +
ggtitle("Ridgeline Plot of Bayesian Posterior Estimates") +
ggsave(file="bayespost.eps", width = 6, height = 5)
mtcars %>% bayes_sent_frame(cyl) %>%
summarise(`25%`=quantile(mpg, probs=0.25),
`50%`=quantile(mpg, probs=0.5),
`75%`=quantile(mpg, probs=0.75),
avg=mean(mpg),
n=n())
bayes_sent_frame %>%
group_by(hero_name) %>%
mutate(lambda_diff = positive - negative) %>%
summarise(`25%` = quantile(lambda_diff, probs=0.25),
`50%` = quantile(lambda_diff, probs=0.5),
`75%` = quantile(lambda_diff, probs=0.75),
avg = mean(lambda_diff),
n=n())
bayes_sent_frame %>%
group_by(hero_name) %>%
mutate(lambda_diff = positive - negative) %>%
summarise(`25%` = quantile(lambda_diff, probs=0.05),
`50%` = quantile(lambda_diff, probs=0.5),
`75%` = quantile(lambda_diff, probs=0.95),
avg = mean(lambda_diff),
n=n())
bayes_sent_frame %>%
group_by(hero_name) %>%
mutate(lambda_diff = positive - negative) %>%
summarise(`5%` = quantile(lambda_diff, probs=0.05),
`50%` = quantile(lambda_diff, probs=0.5),
`95%` = quantile(lambda_diff, probs=0.95),
avg = mean(lambda_diff),
n=n())
#create a ridgeline plot of the posterior intervals
bayes_sent_frame %>%
mutate(lambda_diff = positive - negative) %>%
select(hero_name, lambda_diff) %>%
ggplot(aes(x = lambda_diff, y = hero_name)) +
geom_density_ridges(scale = 2, fill = "grey", color = "darkgrey") +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank()) +
xlab(paste(expression(lambda), " Difference")) +
ggtitle("Ridgeline Plot of Bayesian Posterior Estimates") +
ggsave(file="bayespost.eps", width = 6, height = 5)
#create a ridgeline plot of the posterior intervals
bayes_sent_frame %>%
mutate(lambda_diff = positive - negative) %>%
select(hero_name, lambda_diff) %>%
ggplot(aes(x = lambda_diff, y = hero_name)) +
geom_density_ridges(scale = 2, fill = "grey", color = "darkgrey") +
theme_ridges(font_size = 13, grid = TRUE) + theme(axis.title.y = element_blank()) +
xlab(paste(expression(lambda), " Difference")) +
ggtitle("Ridgeline Plot of Bayesian Posterior Estimates") +
ggsave(file="bayespost.eps", width = 6, height = 5)
bayes_sent_frame %>%
group_by(hero_name) %>%
mutate(lambda_diff = positive - negative) %>%
summarise(`5%` = quantile(lambda_diff, probs=0.05),
`50%` = quantile(lambda_diff, probs=0.5),
`95%` = quantile(lambda_diff, probs=0.95),
avg = mean(lambda_diff),
n=n())
library(rjags)
library(coda)
library(mcmcplots)
library(stringr)
library(plyr)
library(dplyr)
library(tidyr)
library(caret)
setwd("~/Stash/product_flagship_halo")
library(tidyverse)
broadwaycust <- read_csv("Data/all_customers.csv")
cust_totals <- broadwaycust %>%
filter(net_demand > 0) %>%
group_by(final_individ, group, before) %>%
summarize(total_amount = sum(net_demand)) %>%
filter(total_amount < 10000)
reg_ready <- broadwaycust %>%
filter(net_demand > 0) %>%
group_by(final_individ, group, before, storename) %>%
summarize(total_amount = sum(net_demand)) %>%
filter(total_amount < 10000) %>%
ungroup() %>%
rename(timeperiod = before) %>%
mutate(timeperiod = ifelse(timeperiod == "True", "Pre", "Post"))
reg_ready %>%
spread(timeperiod, total_amount) %>%
mutate(diff = Post - Pre) %>%
na.omit() %>%
ggplot(aes(diff)) +
geom_histogram(bins = 100) +
facet_grid(storename ~ group, scales = "free_y")
reg_ready %>%
spread(timeperiod, total_amount) %>%
mutate(diff = Post - Pre) %>%
na.omit() %>%
group_by(group, storename) %>%
summarize(mudiff = mean(diff))
cust_diffs <- cust_totals %>%
spread(before, total_amount) %>%
rename(before = True, after = False) %>%
mutate(diff = after - before) %>%
na.omit()
reg_ready$timeperiod <- relevel(as.factor(reg_ready$timeperiod), ref = "Pre")
reg_ready$group <- relevel(as.factor(reg_ready$group), ref = "non-flagship")
summary(lm(total_amount ~ group + storename + timeperiod +
(group * storename * timeperiod),
data = reg_ready))
cust_totals$before <- relevel(as.factor(cust_totals$before), ref = "True")
cust_totals$group <- relevel(as.factor(cust_totals$group), ref = "non-flagship")
summary(lm(total_amount ~ group + before + (group * before), data = cust_totals))
# Example for Jags-Ymet-Xnom2fac-MnormalHom.R
#-------------------------------------------------------------------------------
# Optional generic preliminaries:
graphics.off() # This closes all of R's graphics windows.
rm(list=ls())  # Careful! This clears all of R's memory!
#-------------------------------------------------------------------------------
#Load The data file
fileNameRoot = "SalaryNormalHom-"
graphFileType = "eps"
myDataFrame = read.csv( file="Salary.csv" )
# Re-label and re-order the Pos factor:
myDataFrame$Pos = factor( myDataFrame$Pos ,
levels=c("FT3","FT2","FT1","NDW","DST") ,
ordered=TRUE ,
labels=c("Assis","Assoc","Full","Endow","Disting") )
# Specify the column names in the data file relevant to the analysis:
yName="Salary"
# x1 should be factor with fewer levels, to plot in single pane:
x1Name="Pos"
x2Name="Org"
setwd("~/Downloads/DBDA2Eprograms")
# Specify desired contrasts.
# Each main-effect contrast is a list of 2 vectors of level names,
# a comparison value (typically 0.0), and a ROPE (which could be NULL):
x1contrasts = list(
list( c("Full") , c("Assoc") , compVal=0.0 , ROPE=c(-1000,1000) ) ,
list( c("Assoc") , c("Assis") , compVal=0.0 , ROPE=c(-1000,1000) )
)
x2contrasts = list(
list( c("CHEM") , c("ENG") , compVal=0.0 , ROPE=c(-1000,1000) ) ,
list( c("CHEM") , c("PSY") , compVal=0.0 , ROPE=c(-1000,1000) ) ,
list( c("BFIN") , c("PSY","CHEM","ENG") , compVal=0.0 , ROPE=c(-1000,1000) )
)
# Each interaction contrast is a list of 2 lists of 2 vectors of level names,
# a comparison value (typically 0.0), and a ROPE (which could be NULL)::
x1x2contrasts = list(
list( list( c("Full") , c("Assis") ) ,
# Each interaction contrast is a list of 2 lists of 2 vectors of level names,
# a comparison value (typically 0.0), and a ROPE (which could be NULL)::
x1x2contrasts = list(
list( list( c("Full") , c("Assis") ) ,
list( c("CHEM") , c("ENG") ) ,
compVal=0.0 , ROPE=c(-1000,1000) ) ,
list( list( c("Full") , c("Assis") ) ,
list( c("CHEM") , c("PSY") ) ,
compVal=0.0 , ROPE=c(-1000,1000) ) ,
list( list( c("Full") , c("Assoc","Assis") ) ,
list( c("BFIN") , c("PSY","CHEM","ENG") ) ,
compVal=0.0 , ROPE=c(-1000,1000) )
)
# fileNameRoot = "SplitPlotAgriData-NOSUBJ-"
# graphFileType = "eps"
# myDataFrame = read.csv( "SplitPlotAgriData.csv" )
# # Specify the column names in the data file relevant to the analysis:
# yName="Yield"
# x1Name="Fert"
# x2Name="Till"
# #xSubjectName="Field"
# x1contrasts = list(
#   list( c("Deep","Surface") , c("Broad") , compVal=0.0 , ROPE=c(-5,5) )
# )
# x2contrasts = list(
#   list( c("Moldbrd") , c("Ridge") , compVal=0.0 , ROPE=c(-5,5) ) ,
#   list( c("Moldbrd","Ridge") , c("Chisel") , compVal=0.0 , ROPE=c(-5,5) )
# )
# x1x2contrasts = list(
#   list( list(  c("Broad") , c("Deep","Surface") ) ,
#         list( c("Chisel","Moldbrd") , c("Ridge") ) ,
#         compVal=0.0 , ROPE=c(-5,5) )
# )
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ymet-Xnom2fac-MnormalHom.R")
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( datFrm=myDataFrame ,
yName=yName , x1Name=x1Name , x2Name=x2Name ,
numSavedSteps=15000 , thinSteps=5 ,
saveName=fileNameRoot )
#-------------------------------------------------------------------------------
# Display diagnostics of chain, for specified parameters:
parameterNames = varnames(mcmcCoda)
show( parameterNames ) # show all parameter names, for reference
for ( parName in c("b0","b1[1]","b2[1]","b1b2[1,1]","ySigma") ) {
diagMCMC( codaObject=mcmcCoda , parName=parName ,
saveName=fileNameRoot , saveType=graphFileType )
}
#-------------------------------------------------------------------------------
# Get summary statistics of chain:
summaryInfo = smryMCMC( mcmcCoda ,
datFrm=myDataFrame , x1Name=x1Name , x2Name=x2Name ,
x1contrasts=x1contrasts ,
x2contrasts=x2contrasts ,
x1x2contrasts=x1x2contrasts ,
saveName=fileNameRoot )
show(summaryInfo)
# Display posterior information:
plotMCMC( mcmcCoda ,
datFrm=myDataFrame , yName=yName , x1Name=x1Name , x2Name=x2Name ,
x1contrasts=x1contrasts ,
x2contrasts=x2contrasts ,
x1x2contrasts=x1x2contrasts ,
saveName=fileNameRoot , saveType=graphFileType )
setwd("~/Downloads/DBDA2Eprograms")
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ymet-Xnom2fac-MnormalHom.R")
#--------------------------------------------
fileNameRoot = "SalaryNormalHom-"
graphFileType = "eps"
myDataFrame = read.csv( file="Salary.csv" )
# Re-label and re-order the Pos factor:
myDataFrame$Pos = factor( myDataFrame$Pos ,
levels=c("FT3","FT2","FT1","NDW","DST") ,
ordered=TRUE ,
labels=c("Assis","Assoc","Full","Endow","Disting") )
# Specify the column names in the data file relevant to the analysis:
yName="Salary"
# x1 should be factor with fewer levels, to plot in single pane:
x1Name="Pos"
x2Name="Org"
# Specify desired contrasts.
# Each main-effect contrast is a list of 2 vectors of level names,
# a comparison value (typically 0.0), and a ROPE (which could be NULL):
x1contrasts = list(
list( c("Full") , c("Assoc") , compVal=0.0 , ROPE=c(-1000,1000) ) ,
list( c("Assoc") , c("Assis") , compVal=0.0 , ROPE=c(-1000,1000) )
)
x2contrasts = list(
list( c("CHEM") , c("ENG") , compVal=0.0 , ROPE=c(-1000,1000) ) ,
list( c("CHEM") , c("PSY") , compVal=0.0 , ROPE=c(-1000,1000) ) ,
list( c("BFIN") , c("PSY","CHEM","ENG") , compVal=0.0 , ROPE=c(-1000,1000) )
)
# Each interaction contrast is a list of 2 lists of 2 vectors of level names,
# a comparison value (typically 0.0), and a ROPE (which could be NULL)::
x1x2contrasts = list(
list( list( c("Full") , c("Assis") ) ,
list( c("CHEM") , c("ENG") ) ,
compVal=0.0 , ROPE=c(-1000,1000) ) ,
list( list( c("Full") , c("Assis") ) ,
list( c("CHEM") , c("PSY") ) ,
compVal=0.0 , ROPE=c(-1000,1000) ) ,
list( list( c("Full") , c("Assoc","Assis") ) ,
list( c("BFIN") , c("PSY","CHEM","ENG") ) ,
compVal=0.0 , ROPE=c(-1000,1000) )
)
# fileNameRoot = "SplitPlotAgriData-NOSUBJ-"
# graphFileType = "eps"
# myDataFrame = read.csv( "SplitPlotAgriData.csv" )
# # Specify the column names in the data file relevant to the analysis:
# yName="Yield"
# x1Name="Fert"
# x2Name="Till"
# #xSubjectName="Field"
# x1contrasts = list(
#   list( c("Deep","Surface") , c("Broad") , compVal=0.0 , ROPE=c(-5,5) )
# )
# x2contrasts = list(
#   list( c("Moldbrd") , c("Ridge") , compVal=0.0 , ROPE=c(-5,5) ) ,
#   list( c("Moldbrd","Ridge") , c("Chisel") , compVal=0.0 , ROPE=c(-5,5) )
# )
# x1x2contrasts = list(
#   list( list(  c("Broad") , c("Deep","Surface") ) ,
#         list( c("Chisel","Moldbrd") , c("Ridge") ) ,
#         compVal=0.0 , ROPE=c(-5,5) )
# )
#-------------------------------------------------------------------------------
# Load the relevant model into R's working memory:
source("Jags-Ymet-Xnom2fac-MnormalHom.R")
#-------------------------------------------------------------------------------
# Generate the MCMC chain:
mcmcCoda = genMCMC( datFrm=myDataFrame ,
yName=yName , x1Name=x1Name , x2Name=x2Name ,
numSavedSteps=15000 , thinSteps=5 ,
saveName=fileNameRoot )
#-------------------------------------------------------------------------------
# Get summary statistics of chain:
summaryInfo = smryMCMC( mcmcCoda ,
datFrm=myDataFrame , x1Name=x1Name , x2Name=x2Name ,
x1contrasts=x1contrasts ,
x2contrasts=x2contrasts ,
x1x2contrasts=x1x2contrasts ,
saveName=fileNameRoot )
show(summaryInfo)
# Display posterior information:
plotMCMC( mcmcCoda ,
datFrm=myDataFrame , yName=yName , x1Name=x1Name , x2Name=x2Name ,
x1contrasts=x1contrasts ,
x2contrasts=x2contrasts ,
x1x2contrasts=x1x2contrasts ,
saveName=fileNameRoot , saveType=graphFileType )
#-------------------------------------------------------------------------------
# Other specific comparisons of cells:
if ( fileNameRoot == "SalaryNormalHom-" ) {
# THIS x1level minus THAT x1level at AT x2level:
THISx1 = "Full"
THATx1 = "Assis"
ATx2 = "CHEM"
THISidx = which(levels(myDataFrame[,x1Name])==THISx1)
THATidx = which(levels(myDataFrame[,x1Name])==THATx1)
ATidx   = which(levels(myDataFrame[,x2Name])==ATx2)
openGraph(height=4,width=4)
compInfo = plotPost(
as.matrix(mcmcCoda)[,paste("m[",THISidx,",",ATidx,"]",sep="")] -
as.matrix(mcmcCoda)[,paste("m[",THATidx,",",ATidx,"]",sep="")] ,
main=paste(THISx1,"-",THATx1,"@",ATx2) ,
xlab=paste("Difference in",yName) ,
compVal=0 ,ROPE=c(-1000,1000) )
show(compInfo)
saveGraph(file=paste(fileNameRoot,THISx1,"-",THATx1,"At",ATx2,sep=""),
type=graphFileType)
# THIS x1level minus THAT x1level at AT x2level:
THISx1 = "Full"
THATx1 = "Assis"
ATx2 = "PSY"
THISidx = which(levels(myDataFrame[,x1Name])==THISx1)
THATidx = which(levels(myDataFrame[,x1Name])==THATx1)
ATidx   = which(levels(myDataFrame[,x2Name])==ATx2)
openGraph(height=4,width=4)
compInfo = plotPost(
as.matrix(mcmcCoda)[,paste("m[",THISidx,",",ATidx,"]",sep="")] -
as.matrix(mcmcCoda)[,paste("m[",THATidx,",",ATidx,"]",sep="")] ,
main=paste(THISx1,"-",THATx1,"@",ATx2) ,
xlab=paste("Difference in",yName) ,
compVal=0 ,ROPE=c(-1000,1000) )
show(compInfo)
saveGraph(file=paste(fileNameRoot,THISx1,"-",THATx1,"At",ATx2,sep=""),
type=graphFileType)
# THIS x2level minus THAT x2level at AT x1level:
THISx2 = "PSY"
THATx2 = "ENG"
ATx1 = "Full"
THISidx = which(levels(myDataFrame[,x2Name])==THISx2)
THATidx = which(levels(myDataFrame[,x2Name])==THATx2)
ATidx   = which(levels(myDataFrame[,x1Name])==ATx1)
openGraph(height=4,width=4)
compInfo = plotPost(
as.matrix(mcmcCoda)[,paste("m[",ATidx,",",THISidx,"]",sep="")] -
as.matrix(mcmcCoda)[,paste("m[",ATidx,",",THATidx,"]",sep="")] ,
main=paste(THISx2,"-",THATx2,"@",ATx1) ,
xlab=paste("Difference in",yName) ,
compVal=0 ,ROPE=c(-1000,1000) )
show(compInfo)
saveGraph(file=paste(fileNameRoot,THISx2,"-",THATx2,"At",ATx1,sep=""),
type=graphFileType)
}
datFrm=myDataFrame , yName=yName , x1Name=x1Name , x2Name=x2Name ,
x1contrasts=x1contrasts ,
x2contrasts=x2contrasts ,
x1x2contrasts=x1x2contrasts ,
saveName=fileNameRoot , saveType=graphFileType )
# Display posterior information:
plotMCMC( mcmcCoda ,
datFrm=myDataFrame , yName=yName , x1Name=x1Name , x2Name=x2Name ,
x1contrasts=x1contrasts ,
x2contrasts=x2contrasts ,
x1x2contrasts=x1x2contrasts ,
saveName=fileNameRoot , saveType=graphFileType )
